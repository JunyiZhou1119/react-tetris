{"version":3,"sources":["img/bg.png","gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","console","log","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4531634e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, 'clear']),\r\n  );\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // 1. Check that we're on an actual Tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. Check that our move is inside the game areas height (y)\r\n          // We shouldn't go through the bottom of the play area\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3. Check that our move is inside the game areas width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // 4. Check that the cell wer'e moving to isn't set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            'clear'\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","import styled from 'styled-components';\r\n\r\nimport bgImage from '../../img/bg.png';\r\n\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: url(${bgImage}) #000;\r\n    background-size: cover;\r\n    overflow: hidden;\r\n`\r\n\r\nexport const StyledTetris = styled.div`\r\n        display: flex;\r\n        align-items: flex-start;\r\n        padding: 40px;\r\n        margin: 0 auto;\r\n        max-width: 900px;\r\n\r\n        aside {\r\n\r\n            width: 100%;\r\n            max-width: 200px;\r\n            display: block;\r\n            padding: 0 20px;\r\n        }\r\n`","export const TETROMINOS = {\r\n\r\n    0: {shape: [[0]], color: '0,0,0'},\r\n    I: {shape: [\r\n        [0, 'I', 0, 0],\r\n        [0, 'I', 0, 0],\r\n        [0, 'I', 0, 0],\r\n        [0, 'I', 0, 0] \r\n    ], color: '80,227,230',\r\n    },\r\n\r\n    J: {shape: [\r\n        [0, 'J', 0],\r\n        [0, 'J', 0],\r\n        ['J', 'J', 0] \r\n        ], color: '36,95,223',\r\n    },\r\n\r\n    L: {shape: [\r\n        [0, 'L', 0],\r\n        [0, 'L', 0],\r\n        [0, 'L', 'L'] \r\n        ], color: '223,173,36',\r\n    },\r\n\r\n    O: {shape: [\r\n        ['O', 'O'],\r\n        ['O', 'O']\r\n        ], color: '223,217,36',\r\n    },\r\n\r\n    S: {shape: [\r\n        [0, 'S', 'S'],\r\n        ['S', 'S', 0],\r\n        [0, 0, 0] \r\n        ], color: '48, 211, 56',\r\n    },\r\n\r\n    T: {shape: [\r\n        [0, 0, 0],\r\n        ['T', 'T', 'T'],\r\n        [0, 'T', 0 ] \r\n        ], color: '132, 61, 198',\r\n    },\r\n\r\n    Z: {shape: [\r\n        ['Z', 'Z', 0],\r\n        [0, 'Z', 'Z'],\r\n        [0, 0, 0]\r\n        ], color: '227,78,78',\r\n    },\r\n}\r\n\r\nexport const randomTetromino = () => {\r\n\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randTetromino = \r\n        tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n    return TETROMINOS[randTetromino];   \r\n}","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n          return ack;\r\n        }\r\n        ack.push(row);\r\n        return ack;\r\n      }, [])\r\n\r\n    const updateStage = prevStage => {\r\n      // First flush the stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\r\n      );\r\n\r\n      // Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? 'merged' : 'clear'}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      // Then check if we collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n      return newStage;\r\n    };\r\n\r\n    setStage(prev => updateStage(prev));\r\n  }, [player, resetPlayer]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n","    import styled from 'styled-components';\r\n\r\n    export const StyledStage = styled.div `\r\n        display: grid;\r\n        grid-template-rows: repeat(\r\n            ${props => props.height},\r\n\r\n            calc(25vw / ${props => props.width})\r\n        );\r\n\r\n        grid-template-columns: repeat(${props => props.width}, 1fr);\r\n        grid-gap: 1px;\r\n        border: 2px solid #333;\r\n        width: 100%;\r\n        max-width: 25vw;      \r\n        background: #111; \r\n        `","import styled from 'styled-components'\r\n\r\nexport const StyledCell = styled.div`\r\n        width: auto;\r\n        background: rgba(${props => props.color}, 0.8);\r\n        border: ${props => (props.type === 0 ? '0px solid': '4px solid')};\r\n        border-bottom-color: rgba(${props => props.color}, 0.1);\r\n        border-right-color: rgba(${props => props.color}, 1);\r\n        border-top-color: rgba(${props => props.color}, 1);\r\n        border-left-color: rgba(${props => props.color}, 0.3);\r\n`","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color}>{console.log(\"rerender\")}</StyledCell>\r\n)\r\n\r\nexport default React.memo(Cell);","import React from 'react';\r\nimport { StyledStage } from './styles/StyledStage';\r\n\r\nimport Cell from './Cell';\r\n\r\nconst Stage = ({ stage }) => (\r\n  <StyledStage width={stage[0].length} height={stage.length}>\r\n    {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n  </StyledStage>\r\n);\r\n\r\nexport default Stage;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div `\r\n\r\n    box-sizing: border-box;\r\n\r\n    display: flex;\r\n\r\n    align-items: center;\r\n\r\n    margin: 0 0 20px 0;\r\n\r\n    padding: 20px;\r\n\r\n    border: 4px solid #333;\r\n\r\n    min-height: 30px;\r\n\r\n    width: 100%;\r\n\r\n    border-radius: 20px;\r\n\r\n    color: ${props => (props.gameOver ? 'red' : '#999')};\r\n\r\n    background: #000;\r\n\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n\r\n    font-size: 0.8rem;\r\n`","import React from 'react';\r\n\r\nimport {StyledDisplay} from './styles/StyledDisplay';\r\n\r\nconst Display = ({ gameOver, text}) => (\r\n    <StyledDisplay gameOver={gameOver}>{text} </StyledDisplay>\r\n\r\n)\r\n\r\nexport default Display;","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n        box-sizing: border-box;\r\n\r\n        margin: 0 0 20px 0;\r\n\r\n        padding: 20px;\r\n\r\n        min-height: 30px;\r\n\r\n        width: 100%;\r\n\r\n        border-radius: 20px;\r\n\r\n        border: none;\r\n\r\n        color: white;\r\n\r\n        background: #333;\r\n\r\n        font-family: Pixel, Arial, Helvetica, sans-serif;\r\n\r\n        font-size: 1rem;\r\n\r\n        outline: none;\r\n\r\n        cursor: pointer;\r\n`","import React from 'react'\r\n\r\nimport {StyledStartButton} from './styles/StyledStartButton'\r\n\r\nconst StartButton = ({ callback }) => (\r\n    <StyledStartButton onClick = {callback}> Start game</StyledStartButton>\r\n)\r\n\r\nexport default StartButton","import React, { useState } from 'react';\r\n\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\n\r\n// Styled Components\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\n\r\n// Custom Hooks\r\nimport { useInterval } from '../hooks/useInterval'\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\n\r\nimport {useGameStatus} from '../hooks/useGameStatus';\r\n\r\n// Components\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n  console.log('re-render');\r\n\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  }\r\n\r\n  const startGame = () => {\r\n\r\n    // Reset everything\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setRows(0);\r\n    setLevel(0);\r\n\r\n  };\r\n\r\n  const drop = () => {\r\n\r\n    // increase level when player has cleared 10 rows\r\n    if(rows > (level + 1) * 10) {\r\n      setLevel(prev => prev + 1);\r\n      //also increase the speed\r\n\r\n      setDropTime(1000/(level+ 1)+200);\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false })\r\n    } else {\r\n      // Game Over\r\n      if (player.pos.y < 1) {\r\n        console.log(\"GAME OVER!!!\");\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  }\r\n\r\n  const keyUp=({ keyCode}) => {\r\n    if(!gameOver){\r\n      if(keyCode === 40 ) {\r\n        console.log(\"interval on\")\r\n        setDropTime(1000/(level+ 1)+200);\r\n      }\r\n    }\r\n  }\r\n\r\n  const dropPlayer = () => {\r\n    console.log(\"interval off\")\r\n    setDropTime(null);\r\n    drop();\r\n  }\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if(keyCode === 38) {\r\n          playerRotate(stage, 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  useInterval(()=> {\r\n    drop();\r\n  }, dropTime) \r\n\r\n  return (\r\n    <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp}>\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score:  ${score}`} />\r\n              <Display text={`Rows:  ${rows}`} />\r\n              <Display text={`Level:  ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","import {useState, useCallback } from 'react';\r\nimport { checkCollision, STAGE_WIDTH } from '../gameHelpers';\r\n\r\nimport {TETROMINOS, randomTetromino} from '../tetrominos';\r\n\r\nexport const usePlayer = () => {\r\n\r\n        const [player, setPlayer] = useState({\r\n\r\n            pos: { x: 0, y: 0},\r\n            tetromino: TETROMINOS[0].shape, \r\n            collided: false,\r\n\r\n        });\r\n\r\n        const rotate=(matrix, dir)=>{\r\n            //Make the rows to cols(transpose)\r\n            const rotatedTetro = matrix.map((_,index)=>\r\n            matrix.map(col => col[index]),\r\n            \r\n                );\r\n\r\n            if(dir > 0) return rotatedTetro.map(row=>row.reverse());\r\n            return rotatedTetro.reverse();\r\n        };\r\n\r\n        const playerRotate = (stage, dir)=> {\r\n            const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n\r\n            clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n            const pos = clonedPlayer.pos.x;\r\n            let offset = 1;\r\n            while(checkCollision(clonedPlayer, stage, {x:0, y:0})){\r\n                clonedPlayer.pos.x += offset;\r\n                offset = -(offset + (offset> 0? 1: -1));\r\n                if(offset > clonedPlayer.tetromino[0].length){\r\n                    rotate(clonedPlayer.tetromino, -dir);\r\n                    clonedPlayer.pos.x = pos;\r\n                    return;\r\n                }\r\n            }\r\n\r\n            setPlayer(clonedPlayer)\r\n        }\r\n\r\n        const updatePlayerPos = ({ x, y, collided }) => {\r\n            setPlayer(prev => ({\r\n              ...prev,\r\n              pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\r\n              collided,\r\n            }))\r\n          }\r\n        \r\n          const resetPlayer = useCallback(() => {\r\n            setPlayer({\r\n              pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n              tetromino: randomTetromino().shape,\r\n              collided: false,\r\n            })\r\n          }, [])\r\n\r\n\r\n        return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n \r\n}","import {useState, useEffect, useCallback} from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n\r\n    const[score, setScore] = useState(0);\r\n    \r\n    const[rows, setRows] = useState(0);\r\n    \r\n    const[level, setLevel] = useState(0);\r\n\r\n    const linePoints = [40, 100,300 ,1200];\r\n\r\n    const calcScore = useCallback(()=>{\r\n        // check if we have score \r\n        if(rowsCleared > 0) {\r\n            //this is how original tetris score is calculated\r\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n\r\n            setRows(prev => prev + rowsCleared);\r\n\r\n        }\r\n\r\n    }, [level, linePoints, rowsCleared]);\r\n\r\n\r\n    useEffect(()=> {\r\n\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, score])\r\n\r\n    return [score, setScore, rows, setRows, level, setLevel];\r\n}","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n    <div className=\"App\">\n\n              <Tetris/>\n\n\n    </div>\n\n);\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}